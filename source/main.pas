unit main;

{$mode objfpc}{$H+}

interface

uses
  Classes, SysUtils, Forms, Controls, Graphics, Dialogs, StdCtrls, ExtCtrls,
  RegExpr, LCLIntf, Menus, generatedCode, Clipbrd;

type

  { TrTestForm }

  TrTestForm = class(TForm)
    Button1: TButton;
    FlagsLabel: TLabel;
    DocumentationLabel: TLabel;
    MenuItem1: TMenuItem;
    ModI: TCheckBox;
    ModS: TCheckBox;
    ModG: TCheckBox;
    ModM: TCheckBox;
    MatchesCountLabel: TLabel;
    Legend2: TLabel;
    MatchBoxPopupMenu: TPopupMenu;
    RegexInput: TEdit;
    ErrorLabel: TLabel;
    Legend: TLabel;
    MatchesLabel: TLabel;
    MatchBox: TListBox;
    RegexSourceText: TMemo;
    PanelSplitter: TSplitter;
    procedure Button1Click(Sender: TObject);
    procedure DocumentationLabelClick(Sender: TObject);
    procedure MatchBoxSelectionChange(Sender: TObject; User: boolean);
    procedure MenuItem1Click(Sender: TObject);
    procedure ModHasChanged(Sender: TObject);
    procedure RegexInputChange(Sender: TObject);
    procedure FormCreate(Sender: TObject);
    procedure RegexSourceTextChange(Sender: TObject);
    procedure processRegex;
  private

  public

  end;

var
  rTestForm: TrTestForm;
  re: TRegExpr;
  matchTrack: array of integer;

implementation

{$R *.lfm}

{ TrTestForm }

procedure TrTestForm.processRegex;
var
  counter: Integer;
begin
  ErrorLabel.Caption := '';
  MatchBox.Clear;

  MatchesCountLabel.Caption := '0';

  setLength(matchTrack, 1);

  try
    try
      re := TRegExpr.Create(trim(RegexInput.Caption));
      re.ModifierI := ModI.Checked;
      re.ModifierS := ModS.Checked;
      re.ModifierG := ModG.Checked;
      re.ModifierM := ModM.Checked;

      counter := 1;

      if re.Exec(trim(RegexSourceText.Text)) then begin
        // Add the first match
        if length(re.Match[1]) > 0 then begin
          MatchBox.AddItem(re.Match[1], nil);

          matchTrack[0] := re.MatchPos[1];

          // Add subsequent matchTrack
          while re.ExecNext do begin
            MatchBox.AddItem(re.Match[1], nil);
            setLength(matchTrack, counter+1);
            matchTrack[counter] := re.MatchPos[1];
            counter := counter + 1;
          end;
        end;
      end;
      MatchesCountLabel.Caption := IntToStr(MatchBox.Count);
    finally
      re.Free;
    end;
  except
    on E: Exception do
      ErrorLabel.Caption := E.Message;
  end;
end;

procedure TrTestForm.RegexInputChange(Sender: TObject);
begin
  processRegex;
end;

procedure TrTestForm.DocumentationLabelClick(Sender: TObject);
begin
  OpenURL('https://github.com/MFernstrom/rTest');
end;

procedure TrTestForm.Button1Click(Sender: TObject);
begin
  generatedCodeForm.Memo1.Clear;

  generatedCodeForm.Memo1.Text := 'program Project1;' + LineEnding + LineEnding +
  '{ Based on the Program template. Generated by rTest https://github.com/MFernstrom/rTest }' + LineEnding + LineEnding +
  '{$mode objfpc}{$H+}' + LineEnding + LineEnding +
  'uses' + LineEnding +
  '  {$IFDEF UNIX}' + LineEnding +
  '  cthreads,' + LineEnding +
  '  {$ENDIF}' + LineEnding +
  '  Classes,' + LineEnding +
  '  Regexpr;' + LineEnding + LineEnding +
  'var' + LineEnding +
  '  re: TRegExpr;' + LineEnding +
  'begin' + LineEnding +
  '  re := TRegExpr.Create(''' + trim(RegexInput.Caption) + ''');' + LineEnding +
  '  try' + LineEnding;

  if ModI.Checked then generatedCodeForm.Memo1.Append('    re.ModifierI := true;');
  if ModS.Checked then generatedCodeForm.Memo1.Append('    re.ModifierS := true;');
  if ModG.Checked then generatedCodeForm.Memo1.Append('    re.ModifierG := true;');
  if ModM.Checked then generatedCodeForm.Memo1.Append('    re.ModifierM := true;');

  generatedCodeForm.Memo1.Append('    if re.Exec(''Text to match'') then');
  generatedCodeForm.Memo1.Append('      if length(re.Match[1]) > 0 then');
  generatedCodeForm.Memo1.Append('        writeln(re.Match[1])');

  generatedCodeForm.Memo1.Append('  finally' + LineEnding +
  '    re.Free;' + LineEnding +
  '  end;' + LineEnding);


  generatedCodeForm.Memo1.Append('end.');

  generatedCodeForm.Show;
end;

procedure TrTestForm.MatchBoxSelectionChange(Sender: TObject; User: boolean);
var
  chosenText: String;
begin
  if MatchBox.ItemIndex > -1 then begin
    chosenText := MatchBox.Items[MatchBox.ItemIndex];
    RegexSourceText.SelStart := matchTrack[MatchBox.ItemIndex] -1;
    RegexSourceText.SelLength := Length(chosenText);
    RegexSourceText.SetFocus;
  end;
end;

procedure TrTestForm.MenuItem1Click(Sender: TObject);
begin
  if MatchBox.ItemIndex > -1 then
    Clipboard.AsText := MatchBox.Items[MatchBox.ItemIndex];
end;

procedure TrTestForm.ModHasChanged(Sender: TObject);
begin
  processRegex;
end;

procedure TrTestForm.FormCreate(Sender: TObject);
begin
  ErrorLabel.Caption := '';
  MatchesCountLabel.Caption := '0';
  setlength(matchTrack,1);
  processRegex;
  //generatedCodeForm.Hide;
end;

procedure TrTestForm.RegexSourceTextChange(Sender: TObject);
begin
  processRegex;
end;

end.

